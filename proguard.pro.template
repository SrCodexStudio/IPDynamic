# ════════════════════════════════════════════════════════════════════════════════
#                      ProGuard Configuration for IPDynamic 2.5-OMEGA
# ════════════════════════════════════════════════════════════════════════════════
# Configuración de ofuscación para proteger el código del plugin
# Esta plantilla es procesada por Maven durante la compilación
# ════════════════════════════════════════════════════════════════════════════════

-target @java.target.version@

# ╔════════════════════════════════════════════════════════════════════════════════╗
# ║                            ARCHIVOS DE ENTRADA/SALIDA                         ║
# ╚════════════════════════════════════════════════════════════════════════════════╝
-injars       "@target.dir@/@final.name@.jar"
-outjars      "@target.dir@/@final.name@-obf.jar"

# ╔════════════════════════════════════════════════════════════════════════════════╗
# ║                              LIBRERÍAS NECESARIAS                             ║
# ╚════════════════════════════════════════════════════════════════════════════════╝
# Módulos de Java (Java 9+)
-libraryjars  "@java.home.path@/jmods"

# API de Spigot
-libraryjars  "@spigot.api.jar.path@"

# ╔════════════════════════════════════════════════════════════════════════════════╗
# ║                               REGLAS DE KEEP                                  ║
# ╚════════════════════════════════════════════════════════════════════════════════╝

# Mantener atributos importantes
-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,EnclosingMethod

# Clase principal del plugin
-keep public class me.lssupportteam.ipdynamic.IPDynamic extends org.bukkit.plugin.java.JavaPlugin {
    public <init>();
    public void onEnable();
    public void onDisable();
    public static me.lssupportteam.ipdynamic.IPDynamic getInstance();
}

# Listeners de eventos
-keep public class * implements org.bukkit.event.Listener {
    *;
}

-keepclassmembers class * implements org.bukkit.event.Listener {
    @org.bukkit.event.EventHandler *;
}

# Ejecutores de comandos
-keep public class * implements org.bukkit.command.CommandExecutor {
    public boolean onCommand(org.bukkit.command.CommandSender, org.bukkit.command.Command, java.lang.String, java.lang.String[]);
}

# Completadores de tabs
-keep public class * implements org.bukkit.command.TabCompleter {
    public java.util.List onTabComplete(org.bukkit.command.CommandSender, org.bukkit.command.Command, java.lang.String, java.lang.String[]);
}

# Modelos de datos (importantes para serialización JSON)
-keep class me.lssupportteam.ipdynamic.models.** {
    *;
}

-keepclassmembers class me.lssupportteam.ipdynamic.models.** {
    *;
}

# Constructores por defecto para modelos
-keepclassmembers class me.lssupportteam.ipdynamic.models.** {
    public <init>();
}

# Enums
-keepclassmembers enum * {
    *;
}

# Métodos main (si existen)
-keepclassmembers class * {
    public static void main(java.lang.String[]);
}

# Clases que usan reflexión o serialización
-keep class me.lssupportteam.ipdynamic.utils.JsonUtils { *; }
-keep class me.lssupportteam.ipdynamic.nms.** { *; }

# Mantener nombres de métodos getter/setter para JSON
-keepclassmembers class ** {
    public void set*(***);
    public void set*(int, ***);
    public boolean is*();
    public boolean is*(int);
    public *** get*();
    public *** get*(int);
}

# Clases de configuración
-keep class me.lssupportteam.ipdynamic.managers.*Manager {
    public <init>(...);
    public void load*(...);
    public void save*(...);
    public *** get*(...);
    public boolean is*(...);
}

# Servicios importantes
-keep class me.lssupportteam.ipdynamic.services.** {
    public <init>(...);
    public java.util.concurrent.CompletableFuture *(...);
    public void send*(...);
}

# Clases que pueden ser accedidas desde configuración
-keep class me.lssupportteam.ipdynamic.IPDynamic {
    public *** get*();
    public void reload*();
    public void save*();
}

# ╔════════════════════════════════════════════════════════════════════════════════╗
# ║                         OPCIONES DE OPTIMIZACIÓN                              ║
# ╚════════════════════════════════════════════════════════════════════════════════╝

# Optimizaciones recomendadas
-optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/*

# Número de pasadas de optimización
-optimizationpasses 3

# Permitir modificación de modificadores de acceso
-allowaccessmodification

# Remover código no utilizado
-dontshrink

# Ofuscar nombres usando diccionario personalizado
-obfuscationdictionary @target.dir@/proguard-dictionary.txt
-classobfuscationdictionary @target.dir@/proguard-dictionary.txt
-packageobfuscationdictionary @target.dir@/proguard-dictionary.txt

# Renombrar packages agresivamente - Todo va al package 'a'
-repackageclasses 'a'
-flattenpackagehierarchy 'a'

# Ofuscación agresiva de nombres
-overloadaggressively
-useuniqueclassmembernames
-dontusemixedcaseclassnames

# Renombrar archivos de clases
-adaptresourcefilenames    **.properties,**.xml,**.txt,**.yml,**.yaml
-adaptresourcefilecontents **.properties,**.MF,META-INF/MANIFEST.MF

# Ofuscación adicional
-mergeinterfacesaggressively
-allowaccessmodification
-renamesourcefileattribute SourceFile

# ╔════════════════════════════════════════════════════════════════════════════════╗
# ║                            CONFIGURACIÓN DE SALIDA                            ║
# ╚════════════════════════════════════════════════════════════════════════════════╝

# Archivo de mapeo para debugging
-printmapping @target.dir@/proguard_mapping.txt

# Archivo de configuración utilizada
-printconfiguration @target.dir@/proguard_configuration.txt

# ╔════════════════════════════════════════════════════════════════════════════════╗
# ║                            SUPRESIÓN DE WARNINGS                              ║
# ╚════════════════════════════════════════════════════════════════════════════════╝

# Ignorar warnings para clases externas
-dontwarn org.bukkit.**
-dontwarn net.md_5.bungee.**
-dontwarn io.papermc.**
-dontwarn com.destroystokyo.**

# Ignorar warnings para librerías incluidas
-dontwarn me.lssupportteam.ipdynamic.libs.**
-dontwarn com.google.gson.**
-dontwarn org.apache.commons.net.**
-dontwarn com.zaxxer.hikari.**

# Ignorar warnings generales
-ignorewarnings

# ╔════════════════════════════════════════════════════════════════════════════════╗
# ║                              REGLAS ADICIONALES                               ║
# ╚════════════════════════════════════════════════════════════════════════════════╝

# No ofuscar clases de utilidad críticas
-keep class me.lssupportteam.ipdynamic.utils.ColorUtils {
    public static java.lang.String translateColor(java.lang.String);
    public static java.lang.String stripColor(java.lang.String);
}

-keep class me.lssupportteam.ipdynamic.utils.IPUtils {
    public static boolean isValidIpAddress(java.lang.String);
    public static boolean isValidIpPattern(java.lang.String);
    public static boolean matches(java.lang.String, java.lang.String);
}

# Mantener métodos estáticos importantes
-keepclassmembers class me.lssupportteam.ipdynamic.utils.** {
    public static *** *(...);
}

# Adapters de GSON
-keepclassmembers class * {
    @com.google.gson.annotations.SerializedName <fields>;
}

-keep class * implements com.google.gson.TypeAdapterFactory
-keep class * implements com.google.gson.JsonSerializer
-keep class * implements com.google.gson.JsonDeserializer

# Clases que pueden ser invocadas por reflection
-keep class me.lssupportteam.ipdynamic.commands.CommandManager {
    public boolean onCommand(...);
    public java.util.List onTabComplete(...);
}

# ╔════════════════════════════════════════════════════════════════════════════════╗
# ║                               NOTA IMPORTANTE                                  ║
# ╚════════════════════════════════════════════════════════════════════════════════╝
# Esta configuración está optimizada para IPDynamic 2.5-OMEGA
# Modificar estas reglas puede causar que el plugin no funcione correctamente
#
# Si necesitas debugging después de la ofuscación:
# 1. Consulta el archivo proguard_mapping.txt
# 2. Usa las herramientas de retrace de ProGuard
# ════════════════════════════════════════════════════════════════════════════════